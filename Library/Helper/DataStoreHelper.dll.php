<?php
namespace Library\Helper;

/**
 * @author Andy L.W.L <support@markaxis.com>
 * @since Monday, September 27, 2010
 * @version $Id: DataStoreHelper.dll.php, v 2.0 Exp $
 * @copyright Copyright (c) 2010, Markaxis Corporation
*/

abstract class DataStoreHelper {


    /**
    * Selects rows from the data source
    * @param $query string
    * @param $file string Script location where query execute
    * @param $line int Line location on query invoke
    * @return int Resource ID
    */
    abstract public function select( $query, $file, $line );


    /**
    * Insert rows and return the last insert ID generated by the data source.
    * @param $query string
    * @param $file string Script location where query execute
    * @param $line int Line location on query invoke
    * @return int
    */
    abstract public function insert( $query, $file, $line );


    /**
    * Updates row and return the number of rows updated.
    * @param $query string
    * @param $file string Script location where query execute
    * @param $line int Line location on query invoke
    * @return int
    */
    abstract public function update( $query, $file, $line );


    /**
    * Fetch and return an array of results from the data source.
    * @param $queryID int.
    * @returns mixed[] | false
    */
    abstract public function fetch( $queryID );


    /**
    * Delete row and return the number of rows deleted.
    * @param $query string
    * @param $file string Script location where query execute
    * @param $line int Line location on query invoke
    * @return int
    */
    abstract public function delete( $query, $file, $line );


    /**
    * Return number of rows retrieved, or 0 if null.
    * @param $queryID int
    * @return int
    */
    abstract public function numrows( $queryID );


    /**
    * Return number of fields in a table or 0 if null.
    * @param $queryID int
    * @return int
    */
    abstract public function numfields( $queryID );


    /**
    * Returns the contents of one cell from result set, or 0 if null.
    * @param $queryID int
    * @return int
    */
    abstract public function resultData( $queryID );


    /**
    * Get Data Size
    * @return int
    */
    abstract public function size( );


    /**
    * Get Database Version
    * @return string
    */
    abstract public function version( );


    /**
    * Close Connection
    * @return void
    */
    abstract public function __destruct( );


    /**
    * Performs Data Security Filters
    * @return string
    */
    public function compose( $sql ) {
    	$sqlarr = array( );
        foreach( $sql as $sqlKey => $sqlVal ) {
            $sqlVal = $sqlVal === NULL ? 'NULL' : '"' . addslashes( $sqlVal ) . '"';
            array_push( $sqlarr, addslashes( $sqlKey ) . ' = ' . $sqlVal );
    	}
    	$sql = implode( ', ', $sqlarr );
    	return $sql;
    }
}
?>